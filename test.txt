#include <stdio.h>
#include <string.h>
#include <stdlib.h>

char *_strtok(char *line, const char *delim) {
    static char *token;
    static char *lastTokenEnd;

    char *currentToken;

    if (line != NULL) {
        token = line;
        lastTokenEnd = line;
    } else {
        if (lastTokenEnd == NULL || *lastTokenEnd == '\0') {
            return NULL;
        }
        token = lastTokenEnd;
    }

    if (delim != NULL && *delim != '\0') {
        while (*token != '\0' && strchr(delim, *token) != NULL) {
            token++;
        }

        if (*token == '\0') {
            return NULL;
        }

        currentToken = token;

        while (*token != '\0' && strchr(delim, *token) == NULL) {
            token++;
        }

        if (*token != '\0') {
            *token = '\0';
            lastTokenEnd = token + 1;
        } else {
            lastTokenEnd = NULL;
        }

        return currentToken;
    } else {
        if (lastTokenEnd != NULL && *lastTokenEnd != '\0') {
            currentToken = lastTokenEnd;
            lastTokenEnd = NULL;
            return currentToken;
        } else {
            return NULL;
        }
    }
}

int main() {
    const char *line = "Hello,World|This|is|a|test";
    const char *delim = ",|";

    // Duplicate the string literal before tokenizing
    char *lineCopy = strdup(line);

    // Use _strtok to get the first token
    char *firstToken = _strtok(lineCopy, delim);
    printf("First Token: %s\n", firstToken);

    // Use _strtok to get the rest of the string
    char *restOfString = _strtok(NULL, "");
    if (restOfString != NULL) {
        printf("Rest of the string: %s\n", restOfString);
    } else {
        printf("No more tokens.\n");
    }

    // Remember to free the duplicated string
    free(lineCopy);

    return 0;
}

